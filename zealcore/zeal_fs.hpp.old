/*
Copyright (C) 2023 zCubed3 (Liam R.)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

//
// zeal_fs.hpp - zealFS definition
//

#ifndef ZEALOT_ZEAL_FS_HPP
#define ZEALOT_ZEAL_FS_HPP

//============================================================================

#include <unordered_map>

#include <string>

//============================================================================

class zealFSNode;
class zealFSStream;

//============================================================================

typedef enum
{
	ZEAL_MOUNT_SUCCESS,
	ZEAL_MOUNT_FAILURE,
	ZEAL_MOUNT_NULL_NODE,
} zeal_mount_state_t;

typedef enum
{
	ZEAL_OPEN_TEXT,
	ZEAL_OPEN_BINARY
} zeal_open_mode_t;

typedef enum
{
	ZEAL_SEEK_SET,	// Seeks from the start of the file
	ZEAL_SEEK_CUR,	// Seeks from the current cursor
	ZEAL_SEEK_END	// Seeks from the end of the file
} zeal_seek_origin_t;

//============================================================================

typedef enum
{
	// TODO: Writable files?
	ZEAL_FILE_DIRECTORY
} zeal_file_flags_t;

//============================================================================

typedef struct zeal_file_s
{
	int 			flags;
	std::string 	path;
} zeal_file_t;

//============================================================================

struct zealFSQuery
{
	std::string 		node;
	std::string 		path;
	zeal_open_mode_t 	mode = ZEAL_OPEN_BINARY;
};

//============================================================================

// Zealot's FileSystem, a replacement over id's filesystem
// Completely custom implementation, therefore, my code!
class zealFS
{
protected:
	std::unordered_map<std::string, zealFSNode*> nodes;

public:
	// Mounts the provided node into the internal list of mount points
	// Returns a mount error code

	zeal_mount_state_t 		MountNode(const std::string& id, zealFSNode* node);

	// Attempts to open a file at the given path, you provide the node explicitly
	// TODO: Use std::string?
	zealFSStream* 			Open(const zealFSQuery& query);

	// =============
	//  Dir Listing
	// =============
	std::vector<zeal_file_t>	GetFiles(const char* node);
};

//============================================================================

class zealFSNode
{
public:
	// =======
	//  State
	// =======
	virtual zealFSStream*	Open(const char* path, zeal_open_mode_t mode) = 0;

	virtual void			Close(zealFSStream* stream) = 0;

	// =============
	//  Dir Listing
	// =============
	virtual std::vector<zeal_file_t> GetFiles() = 0;
};

//============================================================================

class zealFSStream
{
public:
	virtual size_t	Read(char* buffer, size_t length) = 0;

	virtual bool	Seek(zeal_seek_origin_t origin, size_t offset) = 0;

	// Returns the type magic of this file
	[[nodiscard]]
	virtual unsigned	Type() const = 0;

	// Returns the size of the file
	[[nodiscard]]
	virtual size_t		Size() const = 0;
};

//============================================================================

#endif //ZEALOT_ZEAL_FS_HPP
