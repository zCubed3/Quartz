/*
Copyright (C) 2023 zCubed3 (Liam R.)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

//
// zeal_fs.hpp - zealFS implementation
//

#include "zeal_fs.hpp.old"

//============================================================================

#include <stdexcept>

#include <cstdio>

//============================================================================

zeal_mount_state_t zealFS::MountNode(const std::string& id, zealFSNode* node)
{
	if (node == nullptr)
		return ZEAL_MOUNT_NULL_NODE;

	// TODO: Check if the key already exists
	this->nodes.emplace(id, node);

	return ZEAL_MOUNT_SUCCESS;
}

zealFSStream* zealFS::Open(const zealFSQuery& query)
{
	auto	node;

	node = this->nodes.find(query.node);

	if (node == this->nodes.end())
		return nullptr;

	return this->nodes
}

zealStack<zeal_file_t> zealFS::GetFiles(const char* node)
{
	zealNode<zealFS::mounted_node_t>* elem;

	for (elem = nodes.Top(); elem != nullptr; elem = elem->next)
	{
		if (elem->element.id == node)
			return std::move(elem->element.node->GetFiles());
	}

	return {};
}

//============================================================================
